{"/home/travis/build/npmtest/node-npmtest-nightwatch-html-reporter/test.js":"/* istanbul instrument in package npmtest_nightwatch_html_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nightwatch-html-reporter/lib.npmtest_nightwatch_html_reporter.js":"/* istanbul instrument in package npmtest_nightwatch_html_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nightwatch_html_reporter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nightwatch_html_reporter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nightwatch-html-reporter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nightwatch-html-reporter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nightwatch_html_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nightwatch_html_reporter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nightwatch_html_reporter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nightwatch_html_reporter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nightwatch_html_reporter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nightwatch_html_reporter.__dirname + '/lib.npmtest_nightwatch_html_reporter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nightwatch-html-reporter/node_modules/nightwatch-html-reporter/lib/reporter.js":"/*\n * nightwatch-html-reporter\n * https://github.com/jls/nightwatch-html-reporter\n *\n * A reporter for nightwatch that generates HTML reports.\n * Example nightwatch/globals.js:\n * var HtmlReporter = require('nightwatch-html-reporter');\n * var htmlReporter = new HtmlReporter({openBrowser: true, reportsDirectory: __dirname + '/reports'});\n * module.exports = {\n *   reporter: htmlReporter.fn\n * }\n * Copyright (c) 2014 James Smith\n * Licensed under the MIT license.\n */\nvar _ = require('lodash'),\n    renderer = require('./renderer'),\n    open = require('open'),\n    async = require('async'),\n    normalize = require('./normalize'),\n    logger = require('./logger'),\n    getOutputFilename = require('./outputFilename');\n\nmodule.exports = function(options) {\n\n  var opts = _.defaults({}, options, {\n    reportsDirectory: __dirname + '/reports',\n    openBrowser: true,\n    hideSuccess: false,\n    reportFilename: 'report.html',\n    uniqueFilename: false,\n    relativeScreenshots: false,\n    themeName: 'default',\n    logLevel: 1,\n    fromXML: false, // Always false for reporter interface.\n    debug: {\n      saveNightwatch: false\n    }\n  });\n\n  logger.setLevel(opts.logLevel);\n  opts.fullOutputFilename = getOutputFilename(opts);\n\n  this.fn = function(results, done) {\n\n    var generate = function generate(next) {\n\n      async.waterfall([\n        normalize.bind(this, opts, results),\n        renderer.bind(this, opts)\n      ], function(err, reportFilename) {\n\n        if (err) {\n          logger.error('Error generating report: ' + err.toString());\n          return next(err);\n        }\n\n        logger.info('HTML Report Generated at: ' + reportFilename);\n        if (opts.openBrowser)\n          open(reportFilename);\n\n        next();\n\n      });\n    };\n\n    async.series([\n      function saveResults(next) {\n        if (opts.debug.saveNightwatch) {\n          logger.log('Saving Nightwatch Report Object');\n          var fs = require('fs');\n          fs.writeFile(opts.debug.saveNightwatch, JSON.stringify(results, null, '\\t'), function(err) {\n            next(err);\n          });\n        } else {\n          next(null);\n        }\n      },\n      generate\n    ], function(err) {\n      done(err);\n    });\n\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-nightwatch-html-reporter/node_modules/nightwatch-html-reporter/lib/renderer.js":"var fs = require('fs'),\n    pug = require('pug'),\n    path = require('path'),\n    logger = require('./logger'),\n    getOutputFilename = require('./outputFilename');\n\nmodule.exports = function(opts, testRun, callback) {\n\n  var save = typeof opts.saveFile === 'undefined' || opts.saveFile === true;\n  var theme = path.join(__dirname, 'themes', opts.themeName, 'index.pug');\n  var outputPath = opts.fullOutputFilename;\n\n  var html = null;\n  try {\n    html = pug.renderFile(theme, {\n      pretty: true,\n      hideSuccess: opts.hideSuccess,\n      testRun: testRun\n    });\n  } catch (e) {\n    return callback(e.toString());\n  }\n\n  // This option exists for tests so we\n  // can check the generated HTML without actually\n  // saving the file.\n  if (save) {\n    logger.log('Saving Report File');\n    fs.writeFile(outputPath, html, function(err) {\n      callback(err, outputPath, html, testRun);\n    });\n  } else {\n    callback(null, outputPath, html, testRun);\n  }\n\n  return outputPath;\n};\n","/home/travis/build/npmtest/node-npmtest-nightwatch-html-reporter/node_modules/nightwatch-html-reporter/lib/logger.js":"var util = require('util');\nvar levels = ['log', 'info', 'warn', 'error'];\nvar ret = {\n  level: 1,\n  setLevel: function(level) {\n    this.level = level;\n  },\n  obj: function(object, method) {\n    this[method](util.inspect(object, false, null));\n  }\n};\n\nlevels.forEach(function(fn, index) {\n  ret[fn] = function() {\n    if (typeof console === 'undefined')\n      return;\n\n    if (index >= ret.level) {\n\n      if (!console[fn])\n        fn = 'log';\n\n      console[fn].apply(console, arguments);\n    }\n  };\n});\n\nmodule.exports = ret;\n","/home/travis/build/npmtest/node-npmtest-nightwatch-html-reporter/node_modules/nightwatch-html-reporter/lib/outputFilename.js":"// Returns the filename of the report that should\n// be saved to disk.\nvar logger = require('./logger');\nvar path = require('path');\nmodule.exports = function(opts, testRun) {\n  var basename = path.basename(opts.reportFilename, '.html');\n  var dirname = path.dirname(opts.reportFilename);\n  var filename = basename + ((opts.uniqueFilename) ? Date.now() : '') + '.html';\n  var outputPath = path.join(opts.reportsDirectory, dirname, filename);\n  return outputPath;\n};\n","/home/travis/build/npmtest/node-npmtest-nightwatch-html-reporter/node_modules/nightwatch-html-reporter/lib/normalize.js":"// Accepts either XML data or the report object\n// from nightwatch and returns a normalized\n// object structure.\n/*\n  run: {\n    isFailure: t or f\n    packages: [{\n      name: 'name',\n      tests: number of tests\n      failures: number of ailures\n      isFailure: t or f\n      suites: [{\n        name: 'name',\n        pkgName: 'name from pkg',\n        passed: number of tests passed\n        failures: number of test failures\n        errors: number of test errors\n        skipped: number skipped,\n        cases: [{\n          isFailure: t or f,\n          message: 'assertion message',\n          stacktrace: empty string or stack trace,\n          failure: false or failure message,\n          screenshots: ['path/to/screen1', '/path/to/screen2']\n        }]\n      }]\n    }]\n  }\n*/\nvar _ = require('lodash'),\n    TestRun = require('./models/testRun'),\n    logger = require('./logger'),\n    getRelativePath = require('./relativePath');\n\nfunction getScreenshotPath(sysout) {\n  return sysout[0].replace(/\\n/g, '').replace('.png]]', '.png').replace('[[ATTACHMENT|', '').trim();\n}\n\nfunction concatErrMessages(concatTo, errs) {\n  return _.uniq(concatTo.concat(_.map(errs, _.trim)));\n}\n\nfunction parse(str) {\n  return _.isNaN(str) ? 0 : parseInt(str, 10);\n}\n\nvar normalizers = {\n\n  // Converts a object parsed from XML report files\n  // into models.\n  xml: function(results, run, options, done) {\n\n    _.each(results, function(result) {\n\n      var pkg = {\n        name: result.testsuites.$.name,\n        tests: parse(result.testsuites.$.tests),\n        failures: parse(result.testsuites.$.failures),\n        suites: []\n      };\n      pkg.isFailure = pkg.failures > 0;\n\n      var filename = result.filename;\n      _.each(result.testsuites.testsuite, function(suiteData) {\n        var $ = suiteData.$;\n\n        var suite = {\n          name: $.name,\n          pkgName: $.package,\n          failures: parse($.failures),\n          errors: parse($.errors),\n          skipped: parse($.skipped),\n          tests: parse($.tests),\n          cases: []\n        };\n\n        // Sometimes the package name isn't in the\n        // xml reports...\n        if (!pkg.name) {\n          if (result.testsuites.filename) {\n            pkg.name = result.testsuites.filename;\n          } else {\n            pkg.name = suite.pkgName;\n          }\n        } else {\n          if (result.testsuites.filename) {\n            pkg.name = result.testsuites.filename + '-' + pkg.name;\n          }\n        }\n\n        suite.passed = suite.tests - suite.errors - suite.failures;\n        suite.isFailure = suite.errors > 0 || suite.failures > 0;\n        suite.errmessages = $['system-err'];\n        pkg.suites.push(suite);\n\n        _.each(suiteData.testcase, function(caseData) {\n\n          var assert = {\n            message: caseData.$.name,\n            time: caseData.$.time,\n            stacktrace: '',\n            failure: false,\n            skipped: false,\n            screenshots: []\n\n            // failure: false or failure message,\n            // screenshots: ['path/to/screen1', '/path/to/screen2']\n          };\n\n          if (caseData.skipped)\n            assert.skipped = true;\n\n          if (caseData.failure && caseData.failure.length > 0)\n            assert.failure = caseData.failure[0].$.message;\n\n          if (caseData['system-out']) {\n            var sspath = getScreenshotPath(caseData['system-out']);\n            if (options.relativeScreenshots) {\n              sspath = getRelativePath(options.fullOutputFilename, sspath);\n            }\n            assert.screenshots.push(sspath);\n          }\n\n          assert.isFailure = assert.failure;\n          suite.cases.push(assert);\n\n          if (assert.isFailure)\n            suite.isFailure = true;\n\n        });\n\n        if (suite.isFailure)\n          pkg.isFailure = true;\n\n      });\n\n      run.addPackage(pkg);\n\n    });\n\n    done(null, run);\n  },\n\n  // Converts an object given to us by nightwatch\n  // into models.\n  latest: function(results, run, options, done) {\n\n    run.errmessages = concatErrMessages(run.errmessages, results.errmessages);\n    _.forOwn(results.modules, function(pkg, pkgName) {\n\n      var npkg = {\n        name: pkgName,\n        suites: [],\n        tests: pkg.tests,\n        failures: pkg.failures,\n        errors: pkg.errors,\n        isFailure: (pkg.failures !== 0 && pkg.errors !== 0)\n      };\n\n      _.forOwn(pkg.completed, function(suite, suiteName) {\n\n        var nsuite = {\n          name: suiteName,\n          pkgName: npkg.name,\n          passed: suite.passed,\n          failures: suite.failed,\n          errors: suite.errors,\n          skipped: suite.skipped,\n          time: suite.time,\n          cases: []\n        };\n\n        // Little weird here but the report object\n        // will not report an error, it will instead\n        // have X failed and empty assertions array.\n        if (nsuite.failures > 0 && suite.assertions.length === 0)\n          nsuite.errors = nsuite.failures;\n\n        nsuite.isFailure = nsuite.failures !== 0 || nsuite.errors !== 0;\n        npkg.suites.push(nsuite);\n\n        _.each(suite.assertions, function(assertion) {\n\n          var assert = _.clone(assertion, true);\n          assert.screenshots = assert.screenshots || [];\n          assert.isFailure = assertion.failure;\n          nsuite.cases.push(assert);\n\n          if (options.relativeScreenshots) {\n            assert.screenshots = assert.screenshots.map(function(sspath) {\n              return getRelativePath(options.fullOutputFilename, sspath);\n            });\n          }\n\n          if (assert.isFailure)\n            nsuite.isFailure = true;\n\n        });\n\n        if (nsuite.isFailure)\n          npkg.isFailure = true;\n\n      });\n\n      run.addPackage(npkg);\n\n      if (npkg.isFailure)\n        run.isFailure = npkg.isFailure;\n\n    });\n\n    done(null, run);\n\n  }\n\n};\n\nmodule.exports = function(options, data, callback) {\n\n  var opts = _.defaults({}, options, { fromXML: false, hideSuccess: false });\n  var testRun = new TestRun(opts);\n  return normalizers[(opts.fromXML) ? 'xml' : 'latest'](data, testRun, opts, callback);\n\n};\n","/home/travis/build/npmtest/node-npmtest-nightwatch-html-reporter/node_modules/nightwatch-html-reporter/lib/models/testRun.js":"module.exports = function(opts) {\n\n  this.errmessages = [];\n  this.packages = [];\n  this.opts = opts;\n  this.isFailure = false;\n\n  this.addPackage = function(pkg) {\n    if (pkg.isFailure)\n      this.isFailure = true;\n\n    if (!opts.hideSuccess || (opts.hideSuccess && pkg.isFailure))\n      this.packages.push(pkg);\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-nightwatch-html-reporter/node_modules/nightwatch-html-reporter/lib/relativePath.js":"var path = require('path');\n\nmodule.exports = function(outputFilename, screenshotPath) {\n  var absOut = path.resolve(outputFilename);\n  var absDir = path.dirname(absOut);\n  return path.relative(absDir, screenshotPath);\n}\n","/home/travis/build/npmtest/node-npmtest-nightwatch-html-reporter/node_modules/nightwatch-html-reporter/Gruntfile.js":"'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    nodeunit: {\n      files: ['test/**/*_test.js']\n    },\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc'\n      },\n      gruntfile: {\n        src: 'Gruntfile.js'\n      },\n      lib: {\n        src: ['lib/**/*.js']\n      },\n      test: {\n        src: ['test/**/*.js']\n      }\n    },\n    watch: {\n      gruntfile: {\n        files: '<%= jshint.gruntfile.src %>',\n        tasks: ['jshint:gruntfile']\n      },\n      lib: {\n        files: '<%= jshint.lib.src %>',\n        tasks: ['jshint:lib', 'nodeunit']\n      },\n      test: {\n        files: '<%= jshint.test.src %>',\n        tasks: ['jshint:test', 'nodeunit']\n      }\n    }\n  });\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n\n  // Default task.\n  grunt.registerTask('default', ['jshint', 'nodeunit']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-nightwatch-html-reporter/node_modules/nightwatch-html-reporter/lib/cli.js":"#! /usr/bin/env node\n/*\n * nightwatch-html-reporter\n * https://github.com/jls/nightwatch-html-reporter\n *\n * Copyright (c) 2014 James Smith\n * Licensed under the MIT license.\n */\n\nvar fs = require('fs'),\n    async = require('async'),\n    nconf = require('nconf'),\n    renderer = require('./renderer'),\n    readdirp = require('readdirp'),\n    open = require('open'),\n    path = require('path'),\n    xml2js = require('xml2js'),\n    parseString = xml2js.parseString,\n    normalize = require('./normalize'),\n    getOutputFilename = require('./outputFilename');\n\nnconf.argv({\n  d: {\n    alias: 'report-dir',\n    describe: 'Directory where nightwatch reports are stored.',\n    demand: true\n  },\n  t: {\n    alias: 'theme',\n    describe: 'Name of theme to use.  Should match a directory in lib/themes.',\n    default: 'default'\n  },\n  o: {\n    alias: 'output',\n    describe: 'Filename to use when saving the generated report.',\n    default: 'generatedReport.html'\n  },\n  u: {\n    alias: 'unique-filename',\n    describe: 'Appends a timestamp to the end of the generated report filename.',\n    default: false\n  },\n  p: {\n    alias: 'prepend-filename',\n    describe: 'Prepend filename to the package name in the report.  Helps distinguish between multiple runs/diff browser/same test',\n    default: false\n  },\n  r: {\n    alias: 'relative-screenshots',\n    describe: 'Convert screenshot paths from absolute to relative to output file.',\n    default: false\n  },\n  b: {\n    alias: 'browser',\n    describe: 'If true generated report will be opened in the browser.',\n    default: true\n  },\n  c: {\n    alias: 'compact',\n    describe: 'Hides success cases and only shows error cases.'\n  },\n  l: {\n    alias: 'log-level',\n    describe: 'Sets what is logged to the console. 0 - all, 1 - info, 2 - warn, 3 - error',\n    default: 1\n  },\n  'save-nightwatch-report': {\n    describe: 'Debug: A filename we use to save the report object passed to us by nightwatch.'\n  },\n  'save-xml-report': {\n    describe: 'Debug: A filename we use to save the parsed XML object from XML reports.'\n  }\n}).env();\n\nvar opts = {\n  reportsDirectory: nconf.get('report-dir'),\n  themeName: nconf.get('theme'),\n  reportFilename: nconf.get('output'),\n  openBrowser: nconf.get('browser') === true,\n  prependFilename: nconf.get('prepend-filename') === true,\n  uniqueFilename: nconf.get('unique-filename') === true,\n  hideSuccess: typeof (nconf.get('compact')) !== 'undefined',\n  logLevel: nconf.get('log-level'),\n  relativeScreenshots: nconf.get('relative-screenshots'),\n  debug: {\n    saveNightwatch: nconf.get('save-nightwatch-report'),\n    saveXML: nconf.get('save-xml-report')\n  },\n  fromXML: true // Always going to be true for cli.\n};\n\nvar logger = require('./logger.js');\nlogger.setLevel(opts.logLevel);\nlogger.info('Reading reports directory...');\n\nvar readOpts = {\n  root: path.resolve(opts.reportsDirectory),\n  fileFilter: '*.xml',\n  entryType: 'files'\n};\n\nopts.fullOutputFilename = getOutputFilename(opts);\n\nasync.waterfall([\n\n  readdirp.bind(readdirp, readOpts),\n\n  function readFiles(results, next) {\n    async.map(results.files, function(result, rnext) {\n      fs.readFile(result.fullPath, function(err, filedata) {\n        rnext(err, { name: result.name, data: filedata });\n      });\n    }, next);\n  },\n\n  function parseFiles(data, next) {\n    async.map(data, function(result, pnext) {\n      parseString(result.data, function(err, parsed) {\n        if (opts.prependFilename)\n          parsed.testsuites.filename = result.name;\n        pnext(err, parsed);\n      });\n    }, next);\n  },\n\n  function saveParsedXML(parsedData, next) {\n    if (opts.debug.saveXML) {\n      var fs = require('fs');\n      fs.writeFile(opts.debug.saveXML, JSON.stringify(parsedData, null, '\\t'), function(err) {\n        next(err, parsedData);\n      });\n    } else {\n      next(null, parsedData);\n    }\n  },\n\n  normalize.bind(this, opts),\n\n  renderer.bind(this, opts)\n\n], function(err, reportFilename, html, run) {\n\n  if (err)\n    return logger.error('Error generating report: ' + err.toString());\n\n  logger.info('Generated Report at: ' + reportFilename);\n  if (opts.openBrowser)\n    open(reportFilename);\n\n});\n","/home/travis/build/npmtest/node-npmtest-nightwatch-html-reporter/node_modules/nightwatch-html-reporter/lib/themes/default/script.js":"$(document).ready(function() {\n  $('.package>.name').click(function() {\n    $(this).siblings('.suites').slideToggle();\n  });\n\n  $('.suites, .errmessages, .testcases').hide();\n\n  $('.suite, .errmessages').click(function() {\n    var $elem = $(this);\n    $elem.children('.testcases, .errors').slideToggle();\n  });\n  $('.toggleSuccess').click(function() {\n    $('.package.success').slideToggle();\n  });\n  $('.toggleError').click(function() {\n    $('.package.error').slideToggle();\n  });\n});\n"}